需求分析 
http形式的服務。對外提供搜尋服務是一個get形式的服務。呼叫此服務時需要查詢條件，分頁條件可以使用page（要顯示第幾頁）、rows（每頁顯示的記錄數）。返回一個json格式的資料 
請求的url： /search/query?q={查詢條件}&page={page}&rows={rows} 
查詢測試：

@Test
public void queryDocument() throws Exception {
SolrServer solrServer = new HttpSolrServer("http://192.168.25.154:8080/solr");
//建立一個查詢物件
SolrQuery query = new SolrQuery();
//設定查詢條件
query.setQuery("*:*");
query.setStart(20);
query.setRows(50);
//執行查詢
QueryResponse response = solrServer.query(query);
//取查詢結果
SolrDocumentList solrDocumentList = response.getResults();
System.out.println("共查詢到記錄："   solrDocumentList.getNumFound());
for (SolrDocument solrDocument : solrDocumentList) {
System.out.println(solrDocument.get("id"));
System.out.println(solrDocument.get("item_title"));
System.out.println(solrDocument.get("item_price"));
System.out.println(solrDocument.get("item_image"));
}
}
返回  =======================================================
public class SearchResult {
//商品列表
private List<Item> itemList;
//總記錄數
private long recordCount;
//總頁數
private long pageCount;
//當前頁
private long curPage;
}




public interface SearchDao {
/**
* 商品搜尋
* @param query
* @return
* @throws Exception
*/
SearchResult search(SolrQuery query) throws Exception;
}


=== DAO ================================

@Repository
public class SearchDaoImpl implements SearchDao {
@Autowired
private SolrServer solrServer;
@Override
public SearchResult search(SolrQuery query) throws Exception {
//返回值物件
SearchResult result = new SearchResult();
//根據查詢條件查詢索引庫
QueryResponse queryResponse = solrServer.query(query);
//取查詢結果
SolrDocumentList solrDocumentList = queryResponse.getResults();
//取查詢結果總數量
result.setRecordCount(solrDocumentList.getNumFound());
//商品列表
List<Item> itemList = new ArrayList<>();
//取高亮顯示
Map<String, Map<String, List<String>>> highlighting = queryResponse.getHighlighting();
//取商品列表
for (SolrDocument solrDocument : solrDocumentList) {
//建立一商品物件
Item item = new Item();
item.setId((String) solrDocument.get("id"));
//取高亮顯示的結果
List<String> list = highlighting.get(solrDocument.get("id")).get("item_title");
String title = "";
if (list != null && list.size()>0) {
title = list.get(0);
} else {
title = (String) solrDocument.get("item_title");
}
item.setTitle(title);
item.setImage((String) solrDocument.get("item_image"));
item.setPrice((long) solrDocument.get("item_price"));
item.setSell_point((String) solrDocument.get("item_sell_point"));
item.setCategory_name((String) solrDocument.get("item_category_name"));
//新增的商品列表
itemList.add(item);
}
result.setItemList(itemList);
return result;
}
}

===Service ================================

@Service
public class SearchServiceImpl implements SearchService {
@Autowired
private SearchDao searchDao;
@Override
public SearchResult search(String queryString, int page, int rows) throws Exception {
//建立查詢物件
SolrQuery query = new SolrQuery();
//設定查詢條件
query.setQuery(queryString);
//設定分頁
query.setStart((page - 1) * rows);
query.setRows(rows);
//設定預設搜素域
query.set("df", "item_keywords");
//設定高亮顯示
query.setHighlight(true);
query.addHighlightField("item_title");
query.setHighlightSimplePre("<em style=\"color:red\">");
query.setHighlightSimplePost("</em>");
//執行查詢
SearchResult searchResult = searchDao.search(query);
//計算查詢結果總頁數
long recordCount = searchResult.getRecordCount();
long pageCount = recordCount / rows;
if (recordCount % rows > 0) {
pageCount  ;
}
searchResult.setPageCount(pageCount);
searchResult.setCurPage(page);
return searchResult;
}
}



===Controller  ================================
Controller層 
接收查詢引數：查詢條件、page、rows 
呼叫Service執行查詢返回一個查詢結果物件。 
把查詢結果包裝到TaotaoResult中返回，結果是json格式的資料。 
如果查詢條件為空，返回狀態碼：400，訊息：查詢條件不能為空。 
Page為空：預設為1 
Rows 為空：預設為60


@Controller
public class SearchController {
@Autowired
private SearchService searchService;
@RequestMapping(value="/query", method=RequestMethod.GET)
@ResponseBody
public TaotaoResult search(@RequestParam("q")String queryString, 
@RequestParam(defaultValue="1")Integer page, 
@RequestParam(defaultValue="60")Integer rows) {
//查詢條件不能為空
if (StringUtils.isBlank(queryString)) {
return TaotaoResult.build(400, "查詢條件不能為空");
}
SearchResult searchResult = null;
try {
//get出現亂碼解決
queryString = new String(queryString.getBytes("iso8859-1"),"utf-8");
searchResult = searchService.search(queryString, page, rows);
} catch (Exception e) {
e.printStackTrace();
return TaotaoResult.build(500, ExceptionUtil.getStackTrace(e));
}
return TaotaoResult.ok(searchResult);
}
}


======applicationContext-solr.xml=========

<!-- 掃描包載入Service實現類 -->
<context:component-scan base-package="com.taotao.search">
<!-- 不要掃描controller包 -->
<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
</context:component-scan>
